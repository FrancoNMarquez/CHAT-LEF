 Titulo: Clase 30 (parte 1) Curso Inteligencia Artificial 
 URL https://youtu.be/eEO4d-c15lU  
 1226 segundos de duracion 
 Hola bienvenidos al curso de Inteligencia artificial de ifes esta es la primera parte de la clase número    30  Hola Bienvenidos a todos a la clase número 30 del curso de Inteligencia artificial de ies el tema de hoy continúa siendo como en la clase pasada l change pero vamos a tomar varios de los conceptos que vimos la clase pasada donde pudimos entender todos los tipos de servicios que brinda l change para aplicarlos a un un objetivo muy concreto que es justamente generar un sistema de respuesta con una base de datos propia de qué se trata esto básicamente puer utilizar a través de l Chain chat gpt como vimos la clase pasada pero para que pueda responder preguntas con la inteligencia que tiene chat gpt con toda la la capacidad que tiene de generar respuestas con lenguaje natural pero sobre la base de una base de datos propia esta base de datos propia va a poder ser un archivo de tipo PDF Word también se pueden tomar cosas de Wikipedia o cualquier aplicación que tenga una app y me brinde sí un conjunto de textos sobre el cual yo pueda trabajar esta aplicación que vamos a hacer hoy y también más adelante vamos a ver que con los agentes voy a poder justamente trabajar con otro tipo de base de datos no de tipo texto pero que también me va a generar una respuesta personalizada como lo que estamos buscando aquí en este caso particular lo vamos a hacer sobre la base de uno de los libros de recursos humanos CR usamos varias clases hacia atrás puntualmente el libro de marth ases que aquí estamos mostrando ubicados aquí en el la pll 11 en este Notebook que es el que vamos a usar para la primer parte de esta clase bueno el título representa un poco lo que hablamos recién de la variedad de tipos de archivos que pueden tomarse como input para que chat gpt conteste con nuestra base de datos propia lo primero que vamos a hacer es preparar los datos más que preparar los datos tenemos que instalar todas las aplicaciones que vamos a usar en en este lap Así que justamente vamos a empezar por esto bien terminado este proceso y al igual que como lo hicimos la clase pasada tenemos que levantar el archivo de environment el punto m que tiene los datos de las apik de chat gpt y pyon que son dos aplicaciones con la cual hoy voy a volver a interactuar Así que vamos a montar el drive y una vez concluida esta tarea vamos a conectarnos con el archivo vamos a abrir concretamente el archivo punem que tiene la información que Recién mencionábamos ahora vamos a instalar una serie de aplicaciones que tienen que ver con el tipo de archivo que yo podría abrir para generar este diálogo con una base de datos propia Aquí vamos a instalar tres archivos pero no vamos a usar los tres Solamente vamos a usar el primero de ellos dado que nuestro archivo que vamos a tomar va a ser un archivo de tipo PDF pero sí les dejo de alguna manera aquí y lo vamos a comentar para no hacer esta instalación en vano que esta sería la aplicación que deberían instalar si el archivo fuese de tipo Word y esta otra si Tomás demos una información desde Wikipedia Así que solamente instalamos lo que nosotros vamos a utilizar y ahora como bien Dice el título Aquí vamos a cargar el documento para eso vamos a hacer una función que le voy a poner cargar documento en el marco de la cual voy a poner como parámetro el archivo o el documento que quiero empezar a cargar en principio al igual que con el criterio que dijimos recién les dejo expresada aquí las tres líneas que corresponderían a levantar las tres los tres tipos diferentes de librería de las tres situaciones que que mencionábamos recién y con el mismo criterio Aquí también dejo expresada tres líneas que tienen que ver con Cómo cargaría el archivo de acuerdo al caso que correspondía nosotros vamos a tomar aquí en principio el PDF porque es el tipo de archivo que tenemos como ingreso pero es importante que les comente que en el caso que es un archivo de tipo Word fíjense que no cambia demasiado el código simplemente lo que cambia la librería pero la estructura de código que voy a escribir Para eso es similar pero en el caso que sea Wikipedia obviamente Wikipedia no es un archivo es un espacio del cual yo puedo sacar información por lo tanto cambia no la librería sino la forma de expresar esta línea a la hora de cargar esa información desde Wikipedia Por qué Porque tengo que ponerle un query No un nombre a un archivo se entiende o sea Wikipedia existo no me va a dar documento sino que yo le voy a mandar un query me va a dar un texto producto de haberle mandado ese query con lo cual como Ven aquí justamente Esa esa línea esa forma de llamar al documento en el caso que use Wikipedia como opción va a ser distinto Así que cargamos esta función y ahora la usamos cómo lo usamos poniéndole justamente a cargar documento que como he denominado esta función el archivo concretamente que le vamos a poner archivo 1 PDF ustedes obviamente lo van a tener como siempre dentro del campus virtual de ifi Así que procedemos a cargar ese documento y lo colocamos en una variable que le he llamado documento una vez que vemos esto vamos a analizar un poquito las características del documento con lo cual vamos a imprimir el documento y su largo como resultado vemos obviamente todo el documento obviamente es imposible verlo así de esta manera simplemente para ver cómo está cargado y ven que está justamente separado por marcas de enter HM corresponde digamos a la característica del documento que está cargado aún no está splite aún no está separado por párrafos Ese es el documento su estado natural pero el dato muy importante aquí es este 89 que me marca Cuántas páginas tiene mi documento dato muy importante para lo que voy a hacer a continuación que es la fragmentación de datos aquí estamos entonces en la fragmentación de datos donde vamos a usar esta librería que usamos la clase pasada recursive charter t splitter que lo que hace es separar el texto Sí en una determinada cantidad de Dimensión que le voy a dar no es en párrafos s lo separa digamos en estructuras que se llaman chang y Recuerden que justamente esta característica que hemos utilizado tiene que ver con el criterio de que esta separación guarde en cada una de ellas algunos componentes de El chun anterior es decir tomo el primer chun y luego cuando creo el segundo toma una determinada cantidad de caracteres del anterior Para no perder el contexto tal cual lo explicamos en la clase anterior en este caso eh Al igual que la clase anterior usamos el criterio de que el chun si sea 200 esto también se puede cambiar lo manejan ustedes yamos a criterio así como el overlap que es justamente Cuántos caracteres del Chan anterior se reproducen en el Chan siguiente bien en este caso vamos a poner justamente todo este split con este criterio de 12 y20 de overlap dentro de una Ray que le voy a llamar fragmentos y luego vamos a imprimir justamente eh el contenido de El Largo perdón de fragmentos para ver justamente En cuántos fragmentos me ha explito mi documento de 89 páginas Perdón en cuantos este chunks ha dividido ese documento y me dice que lo ha hecho en 1025 chuns este documento de 89 páginas con este criterio de que cada el tamaño de cada Chan sea 200 caracteres y haya 20 de overlap como siempre miramos un poquito Cuál es el contenido de algunos de estos chuns y uso el elijo digamos el 101 y veo aquí Bueno presentación en este momento aún est fresco el caso ROM Sí este toda esta cuestión que me lleva a una estructura que tiene como lo puse aquí arriba un tamaño de 200 obviamente no se ve aquí 200 porque solamente Reproduce una parte pero cada uno de estos párrafos tiene para justamente tener este criterio también de separar este documento en estos fragmentos y luego tener esta duplicación perdón de 20 o este overlap de 20 entre un Chan y el otro Bien también podemos cambiar esto obviamente podemos ponerle en lugar del 101 el 10 sí y así vamos a ver bueno Esto es la parte de la dedicatoria un poco más introductoria así que vamos a poner algo más este más avanzado por ahí el 201 bueno ven que ya aquí ya habla de cosas que tienen que ver con el contenido propio del documento y no con la parte de la introducción digamos del documento Recuerden que el documento tiene en principio seguramente algún tipo de prólogo índice cosas que no son digamos de relevancia para lo que nosotros queremos preguntarle digamos vía chat gpt a este libro Y que justamente chat gpt nos responda leyendo o buscando la respuesta en el contexto de ese libro bien como lo explicamos también la clase pasada lo siguiente que vamos a hacer es ahora que tenemos todo el texto separado lo próximo que tenemos que hacer es hacer los embedding pero como los embedding ya lo voy a hacer vía chat gpt lo que necesito saber es cuál va a ser el costo dado que esto obviamente haciéndolo a través de chat gpt tiene un costo en este caso vamos a usar esta función para hacer eso y el modelo que usamos para hacer embedding es text embedy Ada 002 vamos a ir a la página como hicimos la clase pasada de chat gpt de Open y acá V justamente donde están todos los productos que vimos la clase pasada también están los modelos de embedding solamente tengo disponible aav2 y el costo es 0.0001 cada 1000 tokens por eso Esto es lo que voy a tomar como criterio para aplicar en esta función que estamos desarrollando en el Notebook sí Entonces como Ven aquí voy a primero calcular como hicimos la clase pasada la cantidad de tokens que tiene en total este documento y luego de ello lo voy a mostrar por pantalla como result toda esta función y voy a calcular dividiendo ese valor por 1000 y multiplicándolo por el valor que vimos recién del precio que eh Me pide digamos que me solicita para este servicio Open Así que esta es la función la cargamos y Ahora la vamos a utilizar justamente pasándole como parámetro los fragmentos Acuérdese que fragmentos es una Ray que es este que está aquí H que tiene justamente el resultado de haber hecho esta separación este spito de este documento en los distintos chuns Sí así que bueno lo ejecutamos y antes de hacer el proceso sabemos que nuestro nuestro trabajo digamos O Nuestro documento ha sido tokenizado en 42182 tokens y Por ende el costo de hacerlos en beding por parte de openi para esa situación es de 0.0042 bueno supongamos que estoy de acuerdo con ello y que me parece bien y estoy de acuerdo gastar ese dinero Voy a pasar al siguiente paso que es justamente crearlos en beding y subirlos a pyon tal cual hicimos en la clase pasada bien aquí estamos con eso voy a importar pycon voy a importar la librería para los embeddings y voy a importar la librería justamente de pycon bien lo primero que hago es crear la variable embedding crear una instancia de Open embedding con lo cual este va a ser el la variable la instancia de la función que me va a permitir ejecutar los embedding propio de Open Ai Pero antes que nada lo que tengo que hacer es conectarme con pyon y para eso utilizo el método init de donde le paso como parámetro la Api y el nombre del environment que son los elementos que tenía en el archivo punto m Así que dicho Todo esto lo ejecutamos y ya tenemos entonces la instancia de embeddings de Open eii sí que va a ser el que va a tomar el trabajo de hacer los eding y estoy conectado a pyon que va a ser la base de datos en la cual voy a poner el resultado de esos ened son los vectores que son propios de recordemos siempre todo este texto que tenemos transformado a vectores bien una vez que tengo esto lo que voy a hacer es limpiar todos los índices que pueda yo tener en pycon así que bueno ejecuto este código para borrar todos los que tengo y lo único lo único que encuentro Perdón es el índice chat gpt que usamos la clase pasada se acuerdan así que bueno lo está borrando en este momento bien terminado esto lo que voy a hacer ahora es crear un nuevo índice al cual le voy a poner tal un por talento humano que es justamente el o parte del nombre de este libro Y bueno pruebo por las dudas si está ya creado o no y mando un mensaje de error en el caso que así sea pero obviamente ya sabemos Porque lo hicimos recién que este python está vacío Así que mal puede encontrar este índice Así que lo ejecutamos a esto y creamos nuestro nuevo índice tal un si me voy a la aplicación de python veo que ya está creado el índice obviamente sin nada dentro porque aún no he hecho los embeddings Así que volvemos ahora entonces al cola habiendo verificado que el índice ya está creado bien habiendo verificado eso ahora sí vamos a crear los embeddings y lo vamos a cargar en la base de datos python justamente con pyon FR document acuérdense esta introducción que vimos la clase pasada también donde le mando todos los fragmentos en los cual dividí el texto Cuál va a ser el embedding O sea la clase embedding que está habíamos creado aquí decimos que el eding lo va a hacer este con chpt y el nombre del donde voy a poner esos vectores que va a generar este proceso de bedding Así que ejecutamos esto y Recuerden que además de esto ir a python va a quedar contenido dentro de vector stor o sea dentro de la variable vector que es una Ray esto obviamente va a quedar en memoria por el momento después va a desaparecer pero lo que no va a desaparecer y va a quedar es el alojamiento de estos vectores que hicimos en Pon bien ahí terminó el proceso y vamos a volver a python como hicimos hoy y ahora fíjense que tengo 1000 25 vectores que es justamente la cantidad de vectores en los cuales que se corresponde con la cantidad de fragmentos que tiene el el texto que estuve justamente spando fragmentando así que bueno habiendo verificado esto volvemos nuevamente a el col bien de nuevo en el colap lo que vamos a hacer como dice el título aquí es hacer las consultas para lo cual vamos a cargar las librerías retrieval qa y chat Open Ai y vamos a a crear el llm que es el modelo justamente con chat Open el modelo gpt 3.5 Turbo con una temperatura de 1o y vamos a crear el retriever que se acuerdan que también la clase pasada lo hicimos justamente diciéndole que vamos a usar un criterio de búsqueda de tipo de similitud y vamos a buscar las tres mejores coincidencias o las tres eh opciones más cercanas a lo que es el vector que representa la consulta que estamos llevando adelante y finalmente en Chain voy a ejecutar la la consulta con el modelo y con las características de re que le puse justamente para eh poder llevar adelante cualquier búsqueda a través de esta variable Chain y empezamos a hacer las preguntas Cuál es el rol de la motivación lo pongo dentro de una variable pregunta y luego Chain que es la variable que cree punto ran de la pregunta y me da la respuesta y voy a ver cuál es el contenido de la variable respuesta Bueno ahí tenemos el rol de la motivación es fundamental el comportamiento humano etcétera etcétera etcétera ejecutamos otra pregunta ahora Cuáles son los tres sistemas importantes de la motivación humana AC tendría que ser un poquito más explícito es importante obiamente ustedes saben el tema del prom así que bueno ejecutamos esta otra pregunta y vamos a ver cuál es la respuesta aquí está la respuesta los tres sistemas importantes de la motivación humana sí los logros luego punto dos el poder como motivación tres la tenencia como motivación hacemos una pregunta más Cuál es la relación entre el comportamiento y la competencia nuevo aquí me estoy olvidando los artículos y la competencia bueno la ejecutamos y aquí está respuesta la relación entre el comportamiento y la competencia es que los los comportamientos son parte visible de las competencias etcétera etc obviamente esta estas preguntas tienen que ver con el tenor del documento que tomamos como ejemplo no este libro de recursos humanos este así que que bueno obviamente quizás estas preguntas no sean no estén en el común de todos ustedes porque seguramente son más propias de alguien que está en el tema de recursos humanos Pero bueno evidentemente son además preguntas que tienen que ver con el contenido del libro Más allá de que sea recursos humanos con el tipo de tema que trata este libro Obviamente que si ustedes ponen una pregunta de algo que no trata el tema no trata el libro Perdón obviamente la respuesta va a ser muy ambigua o quizás sea una una no respuesta porque no encuentra esa información chat gpt en el caso de no encontrar esa información si le pregunto algo no sé de F por decir algo seguramente me va a decir que no contiene ese documento la información que estoy buscando bien Vamos a ver ahora cómo complementar esto con un sistema de memoria que de alguna manera no con tres preguntas que son independientes como en este caso siga el comportamiento que nosotros tenemos habitualmente con chat donde hacemos una pregunta y luego hacemos una repregunta y una repregunta llevando un hilo conductor desde la primera pregunta hasta la última bien aquí seguimos con añadiendo memoria donde vamos a usar esta misma librería que usamos antes chat openi pero vamos a usar en lugar de esta que eran para consultas directas vamos a usar esta otra que va a servir para hacer una conversación más parecida a lo que hago habitualmente con chat gpt el modelo que vamos aar va a ser exactamente el mismo en el caso del reever también va a ser similar a lo que hicimos en el punto se Y en este caso sí Obviamente el objeto que voy a usar va a ser conversational retal change a diferencia de este que utilizé en el punto seis luego como dijimos vamos a trabajar con un concepto de memoria es decir que la primer consulta va a arrancar con la memoria en blanco pero la segunda consulta que haga la voy a hacer con la idea de volver a trabajar sobre la base de la respuesta anterior por lo tanto este array memoria va a tener todos y cada uno de los diálogos previos a la pregunta que tengo en cuestión así que pongo memoria en blanco y hago la primer pregunta cuáles son los tres sistemas importantes de la motivación humana donde le voy a mandar la pregunta Que obviamente es esta variable y la memoria que en este momento está en blanco luego lo que voy a hacer es agregar esta respuesta a la Ray de memoria para que sea una memoria para la próxima pregunta sí y ponemos la respuesta a esta pregunta bien aquí está entonces repite la pregunta el chat history Ahora va a ser la pregunta y la respuesta los tres sistemas importantes de la motivación humana son los logros el poder como motivación y la pertenencia como motivación bien entonces ahora en la próxima pregunta que voy a poner es podrías ampli arme el primero de ellos el primero de estos puntos obviamente ahora memoria va a ser una Ray que va a contener a todo esto que mencionamos antes es decir la pregunta y la respuesta del caso anterior entonces en esta pregunta tenemos esta pregunta y la memoria el chat history de la pregunta anterior Así que la ejecutamos y aquí tenemos la respuesta fíjense entonces en el chat history tengo la pregunta anterior y la respuesta anterior y ahora tengo la respuesta a esta segunda pregunta podrías ampliarlo en el primero de ellos El primer factor mencionado es la experimentación activa etcétera etcétera etcétera bien entonces con este concepto terminamos la primer parte de esta clase y ahora vamos a continuar con la segunda parte de esta clase para complementar todas las cuestiones que tienen que ver con el sistema de preguntas y respuestas incorporando como adelantamos al principio de esta clase algunos conceptos que tienen que ver con audio hasta aquí llegamos con la primera parte de esta clase nos vemos en la segunda  parte
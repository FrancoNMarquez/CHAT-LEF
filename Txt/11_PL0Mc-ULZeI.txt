 Titulo: Clase6 (parte 2) Curso Inteligencia Artificial 
 URL https://youtu.be/PL0Mc-ULZeI  
 1959 segundos de duracion 
 Hola bienvenidos Esta es la segunda parte de la clase número 6 del curso de Inteligencia artificial de ifes en ella vamos a programar nuestro primer algoritmo de Machine learning empecemos [Música] bien y ahora vamos con la segunda parte de la clase número 6 para lo cual abrimos en clase 6 Notebook clase 6 como siempre desde nuestro Google Drive y lo primero que hacemos como siempre es importar las librerías con las cuales venimos trabajando habitualmente en este caso vamos a trabajar con otras librerías que no hemos trabajado hasta ahora nanpay Panda sin mapu Sí pero vamos a sumar ya lo adelantamos en la teoría sidekitland es la librería que vamos a usar de ahora más para todo el trabajo con Machine learning en este caso es lo primero que importo es justamente una librería que me permite o me va a permitir crear el modelo de regresión lineal que parte de la práctica de esta clase y luego voy a importar mover selection train test split que justamente es la librería que me va a permitir a mí hacer la separación de los datos para test y para entrenamiento luego el resto de los datos obviamente es exactamente lo mismo import warness que sería el sistema operativo Así que ejecuto y ya estoy importando estas librerías a continuación lo que tengo que hacer es importar el archivo A este colap con lo cual en el siguiente paso ejecuto lo que ya sabemos Google cola import files y en up para traerme el archivo Así que empiezo por hacer eso y me voy a ir a la carpeta Boston y así voy a tomar Boston csv y le hago clic y me lo traigo a mi cola siempre chequeo a través del explorador que esté bien aquí está y sigo ahora lo que voy a hacer va a ser crear un Data set a partir de la variable de datos como siempre con p de Rich ssd y auge para ver el contenido de este Boston csb bueno Y así aparece este Boston csv de alguna manera Ya lo hemos manejado sin querer en la teoría porque justamente representa un ejemplo parecido al que usamos allí nosotros así usamos un ejemplo basado en la cantidad de habitaciones promedio que tenía una casa y en base a ello determinamos el precio promedio bien el resto de los datos yo le he dejado aquí un comentario para que bueno si les interesa ver qué significa cada una de las columnas para que quieran hacer cualquier tipo de práctica con ella lo pueden hacer bien una vez que tengo ya abierto mi Data set como siempre voy a tratar de reconocer su formato bien lo que voy a tratar de hacer a continuación va a ser tratar de ver a través de un gráfico si hay una variable independiente y una variable dependiente que puedan llegar a darme la Pauta de que existe un patrón y a partir de eso crear un conjunto de Machine learning en este caso de regresión lineal y vamos a utilizar lo mismo valores que usamos en el ejemplo de la teoría aquí habíamos citado la cantidad de habitaciones en promedio y aquí el valor de la vivienda Por lo cual voy a tratar de hacer un gráfico de puntos como vimos en la teoría obviamente va a tener más puntos ahora porque tengo como vimos aquí 506 observaciones y para ello voy a tratar de llegar a este gráfico este gráfico necesita obviamente por ser un gráfico de dos dimensiones justamente dos variables una variable independiente cantidad de habitaciones y una variable dependiente precio promedio para esto lo que voy a hacer Voy a tener que lograr un x y un Y entonces el X lo voy a tomar del dataset tomando justamente los valores de la columna RM y elli de la columna me debe corta como lo hago con este sexo que está aquí justamente con np array voy a crear un array con todos los datos de la columna RM en este caso datos lo digo por las dos cosas Sí porque es un dato además el Data se llama datos sí bien y luego con la variable y hago otro tanto pero con me debe corta en este caso verán que hay una diferencia entre la forma que uso para darle el valor ahí como el que le doy para x porque por la presencia de np array recuerdan que np tiene que ver con nanpage Sí con la librería bien esto tiene que ver porque no olviden que x puede tener una variable o puede tener más de una variable si tiene una variable estamos hablando de un modelo de relación lineal simple si tiene más de una variable va a ser un modelo de relación Ya por tengo que trabajar en el caso de X con el perra y en el caso de que siempre va a tener solamente un valor siempre va a tener solamente una columna sin NPR bien lo ejecuto y ya voy a tener mi x y mi y ahora que tengo esos elementos voy con plt punto scatter a pedirle que me dé o forme un gráfico de dispersión de punto sí Recuerden que con esto determinó el tipo de gráfico y los datos con que va a manejarse ese gráfico y con plt lo que hago es show Mostrar el gráfico con plt x Label le pongo títulos a la barra de la x y la barra de nai Entonces ejecuto esto y obviamente el dato que me va a dar el resultado que me va a dar es el gráfico que ya vi ya lo tengo hecho por supuesto como siempre en la ejecución de cada instrucción de este Notebook bien este gráfico me da la Pauta Más allá de que existen muchos puntos que están fuera de un patrón que se observa aquí como si fuese una diagonal de izquierda a derecha arriba hacia abajo existen muchos puntos que están muy alejados pero se puede decir que más o menos el 80% de los puntos siguen ese patrón o esa tendencia con lo cual me da la Pauta que puedo pensar en un modelo de regresión lineal que permita dar predicciones para este caso entonces Antes que nada lo que tengo que hacer es poder empezar a pensar en entrenar un modelo con estos datos Pero eso para hacerlo primero tengo que pasar a dividir los conjuntos con los datos que tengo en entrenamiento y en validación o test que es lo que vimos en la teoría Cómo hago esto con la siguiente instrucción fíjense que en el caso de python es muy común que yo pueda poner no una variable igual a un determinado elemento sino que cuando el elemento de la derecha brinda más de una salida o un más de un valor yo puedo poner todos los valores juntos y separados por comas a la izquierda en este caso voy a obtener x-train x test como la variable que va a tener todos los datos x de entrenamiento todos los datos x de Test o de validación y luego estas dos variables para todos los datos y de entrenamiento y todos los datos test de validación esto lo igualo a la función train test split que le pongo a 30 split o qué parámetros le pongo bueno en principio la x y la y los mismos datos que están acá sí los mismos datos que están acá cantidad de habitaciones valor promedio de la vivienda y luego le pongo con test Qué cosa Qué porcentaje en 20 es el 20% va a ir a parar Al conjunto de Test y Por ende el resto va a quedar en el conjunto de entrenamiento con lo cual con esto que es un valor que yo lo puedo por lo general siempre es 20 15 o 25 No mucho más allá de eso pero esto es un valor que lo puedo configurar yo con el nombre que quiera es decir que esto puede ser este valor u otro y finalmente Random State 2 esto es importante porque cada vez que yo ejecute esta instrucción traen text split no va a ser la misma separación es decir va a separar los datos hacia un conjunto y hacia otro Pero cuando lo vuelve a ejecutar la distribución va a ser distinta y cada vez que lo ejecute va a volver a ser distinta por lo tanto con Random lo que me garantizo es que si hay una distribución que por algún hecho fue buena para lograr mi modelo pueda volver a recuperarla justamente al invocar este número bien a continuación lo que voy a hacer va a ser crear una variable que le voy a poner nombre modelo Que obviamente va a tener el modelo que estoy generando y la voy a hacer distanciando creando una instancia de línea recreation de línea model o sea con esto le digo que esta variable va a ser una variable de tipo modelo de regresión línea y luego lo que hago es fit que es fit el famoso entrenamiento el que hemos hablado tantas veces es decir que el modelo va a entrenar Con qué datos con los datos de entrenamiento justamente con el X3 y con el itrain y una vez que hagas entrenamiento me va a dar el mejor modelo de la versión lineal que pueda existir para ese conjunto de entrenamiento lo ejecutamos sí Y esto me tiene que dar a mí una expresión como la que vimos en la teoría es decir y igual a x + B Entonces esto y lo que puedo ver aquí a través de este código voy a hacer un print con algún String una combinación de elementos pero que me permitan visualizar Cuál es el formato de esa expresión primero voy a poner un título ecuación del modelo igual las x más B que es lo que apreciamos recién y voy a conformar en base a valores que me arroja este fit si en el modelo la expresión concreta con el número de a y el número de B Cómo es esto voy a poner print igual modelo punto modelo punto guión bajo va a ser el valor de a que determinó el entrenamiento del modelo de organización lineal para ese modelo a crear y luego x para que se forme la expresión más lo que sería el B que sería el B modelo punto interceptor guión bajo intercept se acuerdan que el B era la intersección de la recta con el eje de la y bueno ese número lo tiene mal entonces con lo cual resumiendo el valor de a va a estar el modelo.coes y el valor de B Es modelo gracias a eso yo voy a ejecutar esto y voy a poder ver cuál es la expresión concreta de este modelo la expresión concreta es 8.74 y todo lo demás x o sea que este es el valor de a más menos 3255 y todo el resto para el B se acuerdan que en la teoría yo le puse algún valor así al azar de tipo ejemplo que puse un 5 a un lado un 7 del otro pero justamente lo que me refiero es esto lo que hace el fit es lograr esta expresión que está aquí en donde obviamente y x son las variables en este caso la variable independiente x y la variable dependiente y los valores que voy a ir obteniendo por cada valor de X va a haber un valor de y Pero por qué Porque x lo va a multiplicar por este valor y le va a sumar este otro valor esos valores salieron insisto del entrenamiento del modelo para lograr esta expresión que es la presión ideal para esta distribución de puntos qué es lo que viene a continuación las predicciones yo hago clic aquí y justamente voy a hacer predicciones con el método predic del modelo que Acabo de crear Este modelo que está aquí arriba si esta ecuación del modelo por lo tanto este x test le va a dar todo un conjunto de variables de entrada todo un conjunto de X a esta expresión y multiplicando cada una de esas x por este coeficiente y sumándole este intercepto va a obtener un y seguir va a ser un y producto de una predicción Está bien que no es necesariamente igual a el y test que se corresponde con este x test Sí si yo me voy más arriba ven donde hacía el tren test split tenía el X test y el itest que es un conjunto que representa un 20% del xei natural con lo cual cada una de estas x va a tener su y como a su vez cada x-30 tenía su itrain Sí cómo lo podemos ver a esto bueno en principio vamos a ver los ipred yo le voy a agregar aquí un código con lo cual voy a poner y guión bajo pez y me va a mostrar todo una raíz ven todo un array de predicciones es decir cada uno de estos que están aquí todos esos valores son ipred producto de un x test al cual se le aplicó la fórmula del modelo y se obtuvo uníprete son 120 elementos y estas son cada una de las 120 predicciones que se obtuvieron en base al x test el X test es un conjunto Insisto que es ese 20% del que hablábamos recién que también lo puedo si quiero ahora escribir ejecutando acá lo veo Estos son todos los valores de entrada todos estos valores de entrada Fueron multiplicados por el coeficiente y sumados a la intercepto y se obtuvo por ejemplo vamos un primer caso este 6,549 se llevó a esta fórmula se la multiplicó y se la sumó y se obtuvo ni como justamente con esta instrucción predict y se obtuvo un ipred Cuál es el ipred este que está acá 38 101 Sí ahora ese ipred será o habrá sido igual a listes real que tenía este X3 Bueno lo que podemos hacer es justamente imprimirlo también con lo cual un sombrero aquí abajo de los para que se pueda ver mejor y más rápido Entonces lo único tema que tenemos aquí es que vamos a tener que hacer un artilugio porque hice itest No es un array con lo cual vamos a tener que aplicar el np array para que transforme ese no array en un array meterlo en una variable perdón y poder Mostrar el contenido de acá lo tengo ven fíjense que en el primer caso el valor natural era 37 6 y la predicción fue 38101 el segundo valor de it fue 27,9 la predicción 2566 un caso más Sí el tercer caso 22,6 la predicción fue 23,78 porque hay tanta diferencia bueno porque evidentemente este algoritmo no es bueno sí Y tiene un bajo nivel de score un bajo nivel de precisión Cómo puedo ver eso como siempre en un gráfico yo voy a hacer en principio un plt scatter con x test eitest es un gráfico de puntos que me va a hacer Ya les adelanto porque tengo el modelo terminado obviamente estos puntos que están acá es decir la cantidad de elementos que son números de habitaciones las x del conjunto de Test y los y del conjunto de Test bien pero cómo puedo ver el modelo cuán cerca está de esa realidad a partir de sus predicciones justamente con esta otra instrucción que es un pl plot que lo que va a hacer es dibujarme una recta donde tomo el mismo x test tenía antes pero en lugar de élites voy a tomar el ipred Por qué Porque yo ahora que quiero ver es ese valor de entrada con el valor que predijo el modelo no con el valor Real Como aquí Bueno luego le pongo simplemente algunos datos cosméticos que tienen que ver con el color red y el ancho de línea que va a ser 3 y finalmente lo que hago es poner Bueno un título general para el gráfico título para elegir las x título para elegirla así y show y lo ejecuto qué puedo ver aquí a partir de esto que obviamente esta recta es muy buena si para acercarse a muchos puntos pero no lo es tanto para los otros puntos Sí por ejemplo estos puntos que están aquí arriba están muy lejos de esta recta con lo cual hay un error muy grande y en este caso también y en estos casos también es decir Tengo demasiada cantidad de puntos por fuera de esta recta sí Y obviamente muy pocos por encima o cerca de esta regla ahora acá no podemos hablar de lo que yo veo simplemente decir bueno son pocos son muchos me parece que están lejos o están cerca hay justamente métodos concretos que me permiten hacer que cosas lo que hablamos en la teoría evaluar la eficiencia de este modelo que es lo que vamos a hacer ahora Bueno cómo lo hacemos con score de modelo score de modelo lo voy a utilizar en principio para medir la eficiencia del conjunto de entrenamiento con x-train e-train y luego voy a hacer lo propio pero con el conjunto de Test con x test eitest lo ejecuto y me dice que tengo un 44% de eficiencia el modelo de entrenamiento es muy malo y ya vamos adelantando que un buen modelo Tiene que estar en el orden de los posibles 90% más de precisión para que sea considerado como bueno por supuesto en el conjunto de Test es mucho mayor la precisión que en el caso del conjunto de entrenamiento Cómo leemos Esto bueno a ver si la situación fuera al revés creo que sería un ya modelo pésimo no Pero de alguna manera porque encima que los score son bajos que haya un mayor nivel de score para el modelo de entrenamiento que para el modelo test no es bueno porque dice que no generaliza bien Y encima el score es muy bajo pero en este caso bueno el que justamente haya obrado también el modelo a pesar de que están muy lejos a nivel de scorde lo que se pretende se puede decir que es una buena lectura de todos modos el conjunto de Test y entrenamiento se puede volver a generar Sí yo vuelvo a ejecutar esto obviamente cambien en Random State y lo puedo volver a probar y ver si en esas condiciones estos números pueden cambiar igual ya son muy bajos y por más que yo haga eso evidentemente Este modelo para este conjunto de puntos o para este en general para lo que es el Data set de Boston no es un buen modelo vamos a probar suerte o mejor suerte con otra alternativa que sería la regresión lineal múltiple vamos entonces a la regresión lineal múltiple donde en lugar de tomar como x datos solamente RM voy a tomar age y Dish también voy a tomar dos variables más fíjense que ya no uso NPR y aquí porque ya obviamente esto es un array porque tiene más de un valor y en el caso de uso justamente me debe Como usaba antes Bueno ejecutó esto ahora como tengo más datos más variables independientes voy a tener que volver a hacer la separación de conjunto de Test y conjunto de entrenamiento vuelvo a ejecutar y vuelvo a crear el modelo y vuelvo a entrenarlo en este caso vamos a hacer una variable que va a llamar modelo m para diferenciarlo del anterior que llamaba modelo a secas y lo que vamos a hacer a continuación es al igual que en el caso anterior intentar descifrar Cuál es la fórmula definitiva que me arroja este nuevo modelo se acuerdan que en el caso anterior habíamos utilizado un String para ver el cohete ir intercept y poder expresar de alguna manera la ecuación del modelo que en ese momento era y igual a a x + B en este caso al ser una regresión lineal múltiple la fórmula es igual a varios a x tantos como elementos yo he tenido aquí en cuenta a la hora de formar la x se acuerdan que es la cantidad de habitaciones la antigüedad de la vivienda y la distancia de los grandes centros urbanos entonces aquí yo tengo tres cofres entonces tengo que sub cero uno y sub 2 y luego finalmente el intercept tal cual como lo tenía antes por eso al redactar esta fórmula y ejecutarla voy a poder comprobar una expresión similar al caso anterior también pero obviamente con más coeficientes que es esta que está aquí más el final que sería la B bien luego de ello que esto simplemente para que veamos la fórmula definitiva que genera Este modelo vamos a medir la precisión que vamos a obtener ahora con este modelo Gaming vemos que la precisión ha mejorado en el caso del modelo de train pero no así en el modelo de Test es el que teníamos los valores aquí arriba 4463 y ahora tenemos 51 y 60 no obstante es bueno Insisto que el modelo de Test tenga un score superior al del modelo de entrenamiento pero los dos indicadores siguen siendo bajos vamos a pasar ahora a ver el último algoritmo de esta clase que es la regresión polinomial para ello vamos a incorporar un nuevo archivo que no va a ser mucho más Útil para demostrar lo que queremos demostrar con este algoritmo vamos a elegir en este caso dentro de la carpeta auto el archivo Auto mpg csb Aquí van a poder ver que estoy incorporando nuevamente librerías que ya había incorporado antes bueno Esto es un ejemplo para que ustedes vean que va a depender muchas veces de si ustedes quieren en algún momento de tener el Notebook y volver a activarlo desde una parte y no del principio pueden incorporar nuevamente las importaciones desde el lugar que ustedes quieran si ya están importadas no va a haber ningún problema lo va a volver a hacer y van a continuar tranquilamente como si no hubiese estado hecho esto antes lo que voy a hacer a continuación es crear una variable de datos con el contenido del archivo que acabo de importar Y luego hacer un gel para poder reconocer el formato de este archivo vamos a eso y vemos el contenido de este archivo el mismo describe características de autos antiguos y aquí tenemos Si es original o no el año de modelo aceleración peso caballo de potencia la cantidad de cilindros y metros por galón metros que recorre por galón bien justamente Esta última característica metros por galón y horsepower son dos elementos que vamos a tomar justamente para probar nuestro algoritmo de regresión polinomial paso seguido Vamos como siempre a reconocer la forma de este este conjunto de datos y justamente activamos datos punto shape Y tenemos 406 observaciones y 9 características luego vamos a ver si algunas de esas observaciones tienen valores nulos se acuerdan que esto lo habíamos visto en el módulo de análisis de datos donde justamente con datos punto y Snoop y zoom sumaba la cantidad de elementos nulos que pueden haber en cada característica y justamente los dos elementos que voy a tomar mpg y Horse tienen elementos nulos en el caso mpg tiene 8 y en el caso es por Power tiene 6 Entonces qué tenemos que hacer aquí depurar este conjunto de datos cómo lo hacíamos con Drop na se acuerdan que los datos no lo llamamos na o Nan Sí entonces lo que hacíamos en ese caso era con axis 0 indicarle que lo que voy a eliminar son registros observaciones y con House le decía Cuál era la condición para eliminar si con que hubiese alguno n y como en este caso que sean ya es condición para que esa observación se eliminada la Otra condición recuerdan que era all es decir que todos fueran Nan Bueno Este no es el caso con lo cual al ejecutar esta instrucción yo lo que voy a hacer es eliminar las 8 observaciones de mpg malas no la mejor dicho y las seis observaciones de hard Power que también son nulas para verificarlo vuelvo a ejecutar la misma instrucción que arriba pero aquí debajo una vez que justamente hizo el dropea y veo que ahora sí está depurado este conjunto de datos con lo cual no tengo ningún npg ni ningún horsepower nulo vuelvo a hacer ahora un shape y con qué me encuentro con que baje de 400 observaciones a 392 observaciones sí es decir la diferencia es justamente las 14 observaciones 8 + 614 que tenían elementos bien ahora que tengo eso paso siguiente voy a poder plotear todos los valores cuya relación existe entre caballo de potencia y millas por galón es decir entre score Y como siempre a un plot pongo los dos elementos en este caso Hot Power mpg de datos por supuesto y este error es para indicarle el color porque quiero que salga el punto en este caso sería rojo y finalmente caballos de potencia como título del eje de las x y millas por galón como título de eje de ejecuto y veo este conjunto de puntos que tiene una forma curva es decir ideal ideal para poder aplicar no algoritmo de depresión lineal simple ni de revisión múltiple sino de regresión polinomial como lo vimos en la teoría pero vamos a probar con un algoritmo de recreación lineal simplemente para ver justamente la diferencia que puede haber entre un algoritmo de este tipo y un algoritmo de revisión polinomial que justamente por la forma como le damos recién sería lo ideal vamos a intentar aplicar un algoritmo de revisión lineal simple dado que tengo dos variables mpg por lo tanto voy a crear una x con el primero de los valores y una y con el segundo y voy a crear un modelo en este caso no le llamo model sino lm de transgresión lineal creo el modelo lo entreno y al obtener su precisión veo ahora cuando lo ejecute que del 60% obviamente muy baja para terminar de visualizar esto bien Vamos a graficarlo Sí así como el mismo gráfico que teníamos antes aquí arriba solamente que ahora le voy a agregar esta línea que lo que hace justamente es dibujar me la línea que representa el modelo que acabo de obtener y la ejecuto y veo que bueno es una línea que evidentemente está muy lejos de poder abarcar la mayor parte de los puntos que tengo aquí obviamente tiene una precisión que está muy baja tal cual lo describe este número que aquí me demuestra ahora vamos a probar con un modelo de organización lineal cuadrático es decir ya como vimos en la teoría elevando una de sus características a una potencia para eso voy a importar esta librería que tengo aquí y justamente lo primero que voy a hacer es utilizarla para empezar a crear justamente una característica featus polinomial en este caso de grado 2 con thegree igual a un número en específico el grado en este caso era un grado 2 es decir elevado a la segunda potencia por lo tanto voy a a través de esta variable poder hacer una transformación sí de horsepower por un valor que no es el propio el original sino el propio elevado a que a la segunda potencia por lo tanto x no va a tener supongamos si fues por dos por ciento en valor sino que va a tener cuatro no va a tener tres sino va a tener 9 es decir siempre el valor original elevado a la segunda potencia eso me va a permitir pensar en un modelo de organización lineal con un formato curvo propio de una descripción de Fórmula elevado a la potencia creo ese modelo lo entreno y me fijo su score y veo que eso score aumenta considerablemente respecto de El anterior teníamos 060 y aquí tenemos 068 pero vamos a hacer una prueba que va más allá de esto es decir no vamos a quedarnos solamente con el caso de un polinomio de grado 2 Si no vamos a tratar de justamente pensar en polinomios de otros grados y probar justamente con cada uno de ellos cuál sería el score la precisión en cada caso por ello voy a crear esta este Ford que tengo aquí y voy a utilizar una variable de que va a ciclar entre valores que van a ir de 2 a 5 Recuerden que siempre decimos el último valor en python no es tenido en cuenta O sea que voy a hacer un polinomio de grado 2 3 4 o 5 lo que voy a hacer dentro del Ford es repetir lo mismo que hice aquí solamente que qué voy a hacer voy a ir variando este valor Por ende fíjense que acá yo no pongo sino igual a d y d va a pasar de ser dos tres cuatro y cinco y en cada ciclo que de voy a imprimir sí Cuál es el score Cuál es la presión de cada caso ejecuto y fíjese los estado que tengo en el caso de esta prueba que he hecho aquí el polinomio de grado 5 es el que me daría la mejor precisión sí bien en este caso yo les dejo un mensajito aquí abajo que es muy importante que lo tengan presente en realidad yo puedo quedarme con que el polinomio de grado 5 es el mejor porque tiene la mejor precisión Pero como este texto lo resaque en realidad la diferencia entre el grado 2 y el grado 3 el grado 4 el grado 5 o si quieren del grado 2 al 5 que es alto más grande no está significativa y esto muchas veces puede llegar a pasar de que amerite que yo elija el grado 2 porque porque si la diferencia no es tan grande y el polinomio grado 5 me va a exigir un coste computacional esto es una palabra que ya vamos a repetir mucho decir cuánto tiene que trabajar la máquina para poder lograr directamente llevar a cabo ese modelo bueno la diferencia No amerita sí hacer trabajar a esa máquina mucho más lo que implicaría de un grado de asombrado 5 si la diferencia de precisión no va a ser tan grande no es un tema de ahora seguramente es un tema que vamos a ver mucho más adelante pero es bueno ya instalando la idea de algunas cosas que tienen que ver con la experiencia que vamos a tener que abordar cuando decidamos Cuál es el modelo más adecuado para la situación que nos toca bien con esto terminamos la clase número 6 nos vamos a ver en el caso número 7 con otro modelo de regresión que se llama regresión logística hemos terminado la clase número 6 del curso en ella aprendimos los conceptos y la puesta en práctica de los algoritmos de regresión lineal simple múltiple Y polinomial como dijo el profesor en la siguiente clase veremos el algoritmo de regresión logística nos vemos en la próxima clase